/* eslint-disable no-unused-vars */
import NavBar from "../components/NavBar"
import {
  fetchSlaComplianceStats,
  fetchPenaltiesByHospital,
  fetchPenaltiesByCompany,
} from "../redux/slices/slaSlice";
import {  Box, Grid, Paper, Typography } from "@mui/material";

import SlaGaugeChart from "./dashboard/SlaGaugeChart";
import { useDispatch, useSelector } from "react-redux";
import { useEffect, useState } from "react";


const MaintenanceCompanyPage = () => {
    const hospitalId = sessionStorage.getItem("hospitalId");
      const [isNavOpen, setIsNavOpen] = useState(true);
    
  
     
    // Log des donn√©es pour v√©rifier leur contenu
    //console.log("Equipements:", equipmentList);
    //console.log("Incidents:", allIncidents);
    //console.log("Services:", serviceByHospital);
    //console.log("maintenanceplans:" , maintenancesPlans);
     //console.log("correctives maintenances:", corrcMaintenance);
     /*// Si tu veux afficher aussi les p√©nalit√©s du prestataire de maintenance, r√©cup√®re son ID :
   */
  
    // Dispatch pour r√©cup√©rer les donn√©es n√©cessaires
    const dispatch = useDispatch();
  
    useEffect(() => {
      // Dispatch des actions pour r√©cup√©rer les incidents, services et √©quipements
     
      dispatch(fetchSlaComplianceStats(hospitalId));
      dispatch(fetchPenaltiesByHospital(hospitalId));
      const companyId = sessionStorage.getItem("userId");
  if (companyId) {
    dispatch(fetchPenaltiesByCompany(companyId));
  }
  
    }, [dispatch, hospitalId]);
  
    const {
    slaComplianceStatus,
    penaltiesByHospital,
      penaltiesByCompany,


  } = useSelector((state) => state.sla);
  
    const interpretSlaConformity = (rate) => {
  if (rate >= 90) return "‚úÖ Excellent niveau de conformit√©. Les d√©lais SLA sont bien respect√©s.";
  if (rate >= 75) return "üü° Conformit√© correcte mais am√©liorable. Surveillez les d√©lais critiques.";
  if (rate >= 50) return "üî¥ Faible conformit√©. Risque √©lev√© de p√©nalit√©s et d'insatisfaction.";
  return "‚ùå Niveau de conformit√© critique. Mesures urgentes √† prendre.";
};

  console.log(slaComplianceStatus,penaltiesByHospital,"top")
  return (
    <Box sx={{ display: "flex", minHeight: '100vh' , mt: 8 , ml:-4 }}>
      <NavBar onToggle={isNavOpen} />
        <Grid item xs={12} md={6}>
      <Paper elevation={3} sx={{ p: 2, borderRadius: 3 }}>
        <Typography variant="h6" gutterBottom>
          üìä Conformit√© SLA
        </Typography>
        <Grid item xs={12} md={6}>
          <Paper elevation={3} sx={{ p: 2, borderRadius: 3 }}>
            {slaComplianceStatus && (
              <SlaGaugeChart complianceRate={slaComplianceStatus.complianceRate} />
            )}
          </Paper>
        </Grid>
        <Typography>Total incidents : {slaComplianceStatus?.totalIncidents}</Typography>
        <Typography>Respect√©s : {slaComplianceStatus?.slaRespected}</Typography>
        <Typography>Violation r√©ponse : {slaComplianceStatus?.responseViolated}</Typography>
        <Typography>Violation r√©solution : {slaComplianceStatus?.resolutionViolated}</Typography>
        <Typography>Taux conformit√© : {slaComplianceStatus?.complianceRate?.toFixed(2)}%</Typography>
        <Typography variant="body2" sx={{ mt: 2, fontStyle: 'italic', color: 'gray' }}>
          {interpretSlaConformity(slaComplianceStatus?.complianceRate || 0)}
        </Typography>

          <Grid item xs={12} md={6}>
            <Paper elevation={3} sx={{ p: 2, borderRadius: 3 }}>
              <Typography variant="h6" gutterBottom>
                üí∞ Total des p√©nalit√©s
              </Typography>
              <Typography>Par soci√©t√© : {penaltiesByCompany?.toFixed(2)} DT</Typography>
            </Paper>
          </Grid>
      </Paper>
    </Grid>
  </Box>
  )
}

export default MaintenanceCompanyPage
